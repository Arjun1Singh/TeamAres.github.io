I"3<h2 id="introduction">Introduction</h2>

<p>Gazebo is a great tool that can be used for the simulation of robots. Many people who are new to ROS , often are not able to understand Gazebo properly , and rely on pre-made robots like turtlebot , husky , etc .. 
These simulations are great! , but if you do not understand atleast the basics , then you will have a hard time figuring out how to add any modification to the robot!
If you are at this stage , then we are there to help you out!!! :smiley:
So let’s dive in!</p>

<h2 id="basic-file-structure">Basic File Structure:</h2>

<p>We are going to use the URDF format for specifying all of our robot elements.
There is a long ongoing debate on wheather it is good to use the SDF or the URDF format for robot simulations!.
But since husky , turtlebot simulators use URDF file to specify robot elements , we are going to do the same.
<strong>Note apart for the URDF files that have the .xacro extension , you might see some file with .gazebo format which we will talk about later in this blog</strong></p>

<p><strong>More about URDF</strong></p>

<p>URDF stands for The Unified Robotic Description Format (URDF). It is an XML file format used in ROS to describe all elements of a robot.</p>

<p>We will use xacro for writing our URDF files.</p>

<ul>
  <li><em>What is xacro ??</em>
    <ul>
      <li>Xacro (XML Macros) Xacro is an XML macro language. With xacro, you can construct shorter and more readable XML files by using macros that expand to larger XML expressions.</li>
    </ul>
  </li>
</ul>

<p>Now I will cover more about the different components of URDF files!</p>

<h2 id="urdf-basics">URDF Basics:</h2>

<p>There are certain elements in URDF for describing robot’s dynamics.
I am going to cover a few basic and essential elements.</p>

<ol>
  <li><code>&lt;robot&gt;</code> element</li>
</ol>

<p>This is the <strong>root element</strong> in the program. 
All of the other elements describing robot will be encapsulated within this element.</p>

<ol>
  <li><code>&lt;link&gt;</code> element</li>
</ol>

<p>The link element describes a <strong>rigid body</strong> in the robot.
A rigid body in any simulation has 3 properties:</p>
<ul>
  <li>Inertial
    <ul>
      <li>Here you can specify the mass of the link</li>
      <li>You can specify the inertia values and they will be stored in a 3 * 3 rotational inertia matrix</li>
      <li>Let’s now see an example of the code</li>
    </ul>
  </li>
</ul>

<pre><code>  &lt;inertial&gt;
         &lt;origin xyz="0 0 0.5" rpy="0 0 0"/&gt;
         &lt;mass value="1"/&gt;
         &lt;inertia ixx="100"  ixy="0"  ixz="0" iyy="100" iyz="0" izz="100" /&gt;
  &lt;/inertial&gt;
</code></pre>

<ul>
  <li>
    <p>Visual Features</p>

    <ul>
      <li>Here you can specify how you rigid body will look</li>
      <li>Hence here you can specify geometry , like a box , a sphere etc.</li>
      <li>You can also meshes to give a look to your rigid bodies and it will be specified here only</li>
      <li>Lets’ also see an example of this</li>
    </ul>
  </li>
</ul>

<pre><code> &lt;visual&gt;
      &lt;origin xyz="0 0 0" rpy="0 0 0" /&gt;
        &lt;geometry&gt;
          &lt;box size="1 1 1" /&gt;
        &lt;/geometry&gt;
        &lt;material name="Cyan"&gt;
          &lt;color rgba="0 1.0 1.0 1.0"/&gt;
        &lt;/material&gt;
 &lt;/visual&gt;
</code></pre>

<ul>
  <li>
    <p>Collision</p>

    <ul>
      <li>As the name sounds , this element helps you to specify the collision properties of the rigid body</li>
      <li>A colision element in a element will be converted into a 3D vector , in order to simplify the computations</li>
      <li>You can also use multiple collision element for a rigid body</li>
      <li>Let’s see an example of this</li>
    </ul>
  </li>
</ul>

<pre><code>&lt;collision&gt;
       &lt;origin xyz="0 0 0" rpy="0 0 0"/&gt;
       &lt;geometry&gt;
        &lt;cylinder radius="1" length="0.5"/&gt;
       &lt;/geometry&gt;
  &lt;/collision&gt;
</code></pre>

<h3 id="putting-it-together">Putting it together</h3>

<ul>
  <li>
    <p>So Uptill now , our code structure will look something like</p>

    <ul>
      <li>We have a root robot element</li>
      <li>In that we will have different rigid bodies specified by links</li>
    </ul>
  </li>
  <li>
    <p>Overall the follwing picture would be helpful to visualise the structure of a link</p>
  </li>
  <li>
    <p><img src="http://wiki.ros.org/urdf/XML/link?action=AttachFile&amp;do=get&amp;target=inertial.png" alt="link_str" /></p>
  </li>
  <li>
    <p>Joint</p>

    <ul>
      <li>This element describes the kinematics and the dynamic of the “joint”</li>
      <li><strong>A joint in Gazebo is formed between parent link and the child link</strong></li>
    </ul>
  </li>
  <li>
    <p>A joint can be made as follows in the URDF File</p>
  </li>
</ul>

<pre><code>&lt;joint name="joint3" type="continuous"&gt;
       &lt;parent link="link3"/&gt;
       &lt;child link="link4"/&gt;
&lt;/joint&gt;
</code></pre>

<ul>
  <li>
    <p>Following picture is good to visualize the point I am saying</p>
  </li>
  <li>
    <p><img src="http://wiki.ros.org/urdf/XML/joint?action=AttachFile&amp;do=get&amp;target=joint.png" alt="joint_str" /></p>
  </li>
  <li>
    <p>Gazebo</p>

    <ul>
      <li>Whatever is written in this element , will not be parsed by xacro</li>
      <li>Instead it will direcly be used by gazebo</li>
      <li>It is used to specify simulation properties such as color etc.</li>
      <li>Generally , these elements are store in the file with extension .gazebo that I told you about in the file structure module</li>
    </ul>
  </li>
</ul>

<p>These elements are enough to get you started !
You will be able to now construct anything you want to make in Gazebo!
If you are anything like me , you will be probably asking , that these are just rigid bodies , but how to add functonalities to them?</p>

<p>Then ans is <strong>Plugins!</strong></p>

<p>Gazebo has several builtin Plugins to use</p>
<ul>
  <li>For example range plugin for the range sensor</li>
  <li>Diff drive plugin for the diff drive controller</li>
  <li>You can declare them , by just mentioning the body , you want to add functionalities to.</li>
  <li>Also remember to put them in a <gazebo> tag , as they are specific to gazebo and wont be parsed by xacro</gazebo></li>
  <li>You can declare them like</li>
</ul>

<pre><code>&lt;gazebo&gt;
&lt;plugin name = " " filename = " "&gt;
&lt;/plugin&gt;
&lt;/gazebo&gt;
</code></pre>

<p>Now you can completely make your robot with sensor’s also!</p>

<p><strong>Note:</strong></p>
<ul>
  <li>In order to launch this robot in gazebo just add robot description parameter in your launch file.</li>
  <li>Like</li>
</ul>

<pre><code>  &lt;param name="robot_description" command="$(find xacro)/xacro.py '$(find fb_description)/urdf/fb.xacro'"/&gt;
</code></pre>

<p>As an example you can look at the simulation made by us here at Team ARES</p>
<ul>
  <li>It has a skid drive controller and We have added a realsense camera , IMU etc. sensors to it</li>
  <li><a href="https://github.com/TeamARES/rover-simulation">Made with :heart: by Team ARES</a></li>
</ul>
:ET